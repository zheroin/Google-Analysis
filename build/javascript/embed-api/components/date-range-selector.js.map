{"version":3,"sources":["webpack:///date-range-selector.js","webpack:///webpack/bootstrap 45d5f8b2882011fff8a1?6eaa","webpack:///./src/javascript/embed-api/components/date-range-selector.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","gapi","analytics","ready","convertDate","str","dateFormat","test","match","nDaysAgo","exec","daysAgo","Error","numDays","date","Date","setDate","getDate","month","String","getMonth","length","day","getFullYear","createComponent","execute","options","this","get","container","document","getElementById","template","innerHTML","dateInputs","querySelectorAll","startDateInput","value","endDateInput","setValues","setMinMax","onchange","onChange","bind","emit","start-date","end-date","max","min"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GExBhCW,KAAAC,UAAAC,MAAA,WAWA,QAAAC,GAAAC,GAEA,GAAAC,EAAAC,KAAAF,GAAA,MAAAA,EAEA,IAAAG,GAAAC,EAAAC,KAAAL,EACA,IAAAG,EACA,MAAAG,IAAAH,EAAA,GACK,aAAAH,EACL,MAAAM,GAAA,EACK,iBAAAN,EACL,MAAAM,GAAA,EAEA,UAAAC,OAAA,uBAAAP,GASA,QAAAM,GAAAE,GACA,GAAAC,GAAA,GAAAC,KACAD,GAAAE,QAAAF,EAAAG,UAAAJ,EACA,IAAAK,GAAAC,OAAAL,EAAAM,WAAA,EACAF,GAAA,GAAAA,EAAAG,OAAA,IAAAH,GACA,IAAAI,GAAAH,OAAAL,EAAAG,UAEA,OADAK,GAAA,GAAAA,EAAAD,OAAA,IAAAC,IACAR,EAAAS,cAAA,IAAAL,EAAA,IAAAI,EArCA,GAAAb,GAAA,eACAH,EAAA,qBAuCAL,MAAAC,UAAAsB,gBAAA,qBAMAC,QAAA,WACA,GAAAC,GAAAC,KAAAC,KACAF,GAAA,cAAAA,EAAA,0BACAA,EAAA,YAAAA,EAAA,yBAGAC,KAAAE,UAAA,gBAAAH,GAAAG,UACAC,SAAAC,eAAAL,EAAAG,WAAAH,EAAAG,UAGAH,EAAAM,WAAAL,KAAAK,SAAAN,EAAAM,UAEAL,KAAAE,UAAAI,UAAAN,KAAAK,QACA,IAAAE,GAAAP,KAAAE,UAAAM,iBAAA,QAWA,OATAR,MAAAS,eAAAF,EAAA,GACAP,KAAAS,eAAAC,MAAAjC,EAAAsB,EAAA,eACAC,KAAAW,aAAAJ,EAAA,GACAP,KAAAW,aAAAD,MAAAjC,EAAAsB,EAAA,aAEAC,KAAAY,YACAZ,KAAAa,YAEAb,KAAAE,UAAAY,SAAAd,KAAAe,SAAAC,KAAAhB,MACAA,MAOAe,SAAA,WACAf,KAAAY,YACAZ,KAAAa,YACAb,KAAAiB,KAAA,UACAC,aAAAlB,KAAA,cACAmB,WAAAnB,KAAA,eAOAY,UAAA,WACAZ,KAAA,cAAAA,KAAAS,eAAAC,MACAV,KAAA,YAAAA,KAAAW,aAAAD,OAMAG,UAAA,WACAb,KAAAS,eAAAW,IAAApB,KAAAW,aAAAD,MACAV,KAAAW,aAAAU,IAAArB,KAAAS,eAAAC,OASAL,SACA","file":"date-range-selector.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright 2014 Google Inc. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t//     http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t\n\t\n\t/* global gapi */\n\t\n\t/**\n\t * A DateRangeSelector component for the Embed API.\n\t */\n\tgapi.analytics.ready(function() {\n\t\n\t  var nDaysAgo = /(\\d+)daysAgo/;\n\t  var dateFormat = /\\d{4}\\-\\d{2}\\-\\d{2}/;\n\t\n\t  /**\n\t   * Convert a date acceptable to the Core Reporting API (e.g. `today`,\n\t   * `yesterday` or `NdaysAgo`) into the format YYYY-MM-DD. Dates\n\t   * already in that format are simply returned.\n\t   * @return {string} The formatted date.\n\t   */\n\t  function convertDate(str) {\n\t    // If str is in the proper format, do nothing.\n\t    if (dateFormat.test(str)) return str;\n\t\n\t    var match = nDaysAgo.exec(str);\n\t    if (match) {\n\t      return daysAgo(+match[1]);\n\t    } else if (str == 'today') {\n\t      return daysAgo(0);\n\t    } else if (str == 'yesterday') {\n\t      return daysAgo(1);\n\t    } else {\n\t      throw new Error('Cannot convert date ' + str);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Accept a number and return a date formatted as YYYY-MM-DD that\n\t   * represents that many days ago.\n\t   * @return {string} The formatted date.\n\t   */\n\t  function daysAgo(numDays) {\n\t    var date = new Date();\n\t    date.setDate(date.getDate() - numDays);\n\t    var month = String(date.getMonth() + 1);\n\t    month = month.length == 1 ? '0' + month: month;\n\t    var day = String(date.getDate());\n\t    day = day.length == 1 ? '0' + day: day;\n\t    return date.getFullYear() + '-' + month + '-' + day;\n\t  }\n\t\n\t  gapi.analytics.createComponent('DateRangeSelector', {\n\t\n\t    /**\n\t     * Initialize the DateRangeSelector instance and render it to the page.\n\t     * @return {DateRangeSelector} The instance.\n\t     */\n\t    execute: function() {\n\t      var options = this.get();\n\t      options['start-date'] = options['start-date'] || '7daysAgo';\n\t      options['end-date'] = options['end-date'] || 'yesterday';\n\t\n\t      // Allow container to be a string ID or an HTMLElement.\n\t      this.container = typeof options.container == 'string' ?\n\t        document.getElementById(options.container) : options.container;\n\t\n\t      // Allow the template to be overridden.\n\t      if (options.template) this.template = options.template;\n\t\n\t      this.container.innerHTML = this.template;\n\t      var dateInputs = this.container.querySelectorAll('input');\n\t\n\t      this.startDateInput = dateInputs[0];\n\t      this.startDateInput.value = convertDate(options['start-date']);\n\t      this.endDateInput = dateInputs[1];\n\t      this.endDateInput.value = convertDate(options['end-date']);\n\t\n\t      this.setValues();\n\t      this.setMinMax();\n\t\n\t      this.container.onchange = this.onChange.bind(this);\n\t      return this;\n\t    },\n\t\n\t    /**\n\t     * Emit a change event based on the currently selected dates.\n\t     * Pass an object containing the start date and end date.\n\t     */\n\t    onChange: function() {\n\t      this.setValues();\n\t      this.setMinMax();\n\t      this.emit('change', {\n\t        'start-date': this['start-date'],\n\t        'end-date': this['end-date']\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Updates the instance properties based on the input values.\n\t     */\n\t    setValues: function() {\n\t      this['start-date'] = this.startDateInput.value;\n\t      this['end-date'] = this.endDateInput.value;\n\t    },\n\t\n\t    /**\n\t     * Updates the input min and max attributes so there's no overlap.\n\t     */\n\t    setMinMax: function() {\n\t      this.startDateInput.max = this.endDateInput.value;\n\t      this.endDateInput.min = this.startDateInput.value;\n\t    },\n\t\n\t    /**\n\t     * The html structure used to build the component. Developers can\n\t     * override this by passing it to the component constructor.\n\t     * The only requirement is that the structure contain two inputs, the\n\t     * first will be the start date and the second will be the end date.\n\t     */\n\t    template:\n\t      '<div class=\"DateRangeSelector\">' +\n\t      '  <div class=\"DateRangeSelector-item\">' +\n\t      '    <label>Start Date</label> ' +\n\t      '    <input type=\"date\">' +\n\t      '  </div>' +\n\t      '  <div class=\"DateRangeSelector-item\">' +\n\t      '    <label>End Date</label> ' +\n\t      '    <input type=\"date\">' +\n\t      '  </div>' +\n\t      '</div>'\n\t  });\n\t\n\t});\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** date-range-selector.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 45d5f8b2882011fff8a1\n **/","// Copyright 2014 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/* global gapi */\n\n/**\n * A DateRangeSelector component for the Embed API.\n */\ngapi.analytics.ready(function() {\n\n  var nDaysAgo = /(\\d+)daysAgo/;\n  var dateFormat = /\\d{4}\\-\\d{2}\\-\\d{2}/;\n\n  /**\n   * Convert a date acceptable to the Core Reporting API (e.g. `today`,\n   * `yesterday` or `NdaysAgo`) into the format YYYY-MM-DD. Dates\n   * already in that format are simply returned.\n   * @return {string} The formatted date.\n   */\n  function convertDate(str) {\n    // If str is in the proper format, do nothing.\n    if (dateFormat.test(str)) return str;\n\n    var match = nDaysAgo.exec(str);\n    if (match) {\n      return daysAgo(+match[1]);\n    } else if (str == 'today') {\n      return daysAgo(0);\n    } else if (str == 'yesterday') {\n      return daysAgo(1);\n    } else {\n      throw new Error('Cannot convert date ' + str);\n    }\n  }\n\n  /**\n   * Accept a number and return a date formatted as YYYY-MM-DD that\n   * represents that many days ago.\n   * @return {string} The formatted date.\n   */\n  function daysAgo(numDays) {\n    var date = new Date();\n    date.setDate(date.getDate() - numDays);\n    var month = String(date.getMonth() + 1);\n    month = month.length == 1 ? '0' + month: month;\n    var day = String(date.getDate());\n    day = day.length == 1 ? '0' + day: day;\n    return date.getFullYear() + '-' + month + '-' + day;\n  }\n\n  gapi.analytics.createComponent('DateRangeSelector', {\n\n    /**\n     * Initialize the DateRangeSelector instance and render it to the page.\n     * @return {DateRangeSelector} The instance.\n     */\n    execute: function() {\n      var options = this.get();\n      options['start-date'] = options['start-date'] || '7daysAgo';\n      options['end-date'] = options['end-date'] || 'yesterday';\n\n      // Allow container to be a string ID or an HTMLElement.\n      this.container = typeof options.container == 'string' ?\n        document.getElementById(options.container) : options.container;\n\n      // Allow the template to be overridden.\n      if (options.template) this.template = options.template;\n\n      this.container.innerHTML = this.template;\n      var dateInputs = this.container.querySelectorAll('input');\n\n      this.startDateInput = dateInputs[0];\n      this.startDateInput.value = convertDate(options['start-date']);\n      this.endDateInput = dateInputs[1];\n      this.endDateInput.value = convertDate(options['end-date']);\n\n      this.setValues();\n      this.setMinMax();\n\n      this.container.onchange = this.onChange.bind(this);\n      return this;\n    },\n\n    /**\n     * Emit a change event based on the currently selected dates.\n     * Pass an object containing the start date and end date.\n     */\n    onChange: function() {\n      this.setValues();\n      this.setMinMax();\n      this.emit('change', {\n        'start-date': this['start-date'],\n        'end-date': this['end-date']\n      });\n    },\n\n    /**\n     * Updates the instance properties based on the input values.\n     */\n    setValues: function() {\n      this['start-date'] = this.startDateInput.value;\n      this['end-date'] = this.endDateInput.value;\n    },\n\n    /**\n     * Updates the input min and max attributes so there's no overlap.\n     */\n    setMinMax: function() {\n      this.startDateInput.max = this.endDateInput.value;\n      this.endDateInput.min = this.startDateInput.value;\n    },\n\n    /**\n     * The html structure used to build the component. Developers can\n     * override this by passing it to the component constructor.\n     * The only requirement is that the structure contain two inputs, the\n     * first will be the start date and the second will be the end date.\n     */\n    template:\n      '<div class=\"DateRangeSelector\">' +\n      '  <div class=\"DateRangeSelector-item\">' +\n      '    <label>Start Date</label> ' +\n      '    <input type=\"date\">' +\n      '  </div>' +\n      '  <div class=\"DateRangeSelector-item\">' +\n      '    <label>End Date</label> ' +\n      '    <input type=\"date\">' +\n      '  </div>' +\n      '</div>'\n  });\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/javascript/embed-api/components/date-range-selector.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}